class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        
        int n=A.size();
        int m=A[0];
        for(int i=0;i<n;i++)
            if(m<A[i])
                m=A[i];
        int ctr=0;
        for(int i=0;i<n;i++)
        {
            if(A[i]<0)
                ++ctr;
        }
        if(ctr==n)
            return m;
    int max_so_far = INT_MIN, max_ending_here = 0;
    for (int i = 0; i <n; i++) 
    { 
        max_ending_here = max_ending_here + A[i]; 
        if (max_so_far < max_ending_here) 
            max_so_far = max_ending_here; 
  
        if (max_ending_here < 0) 
            max_ending_here = 0; 
    } 
      //max_so_far;
        vector<int>b;
        for(int i=0;i<n;i++)
        {
            int m=-A[i];
            b.push_back(m);
        }
          int max_so_far1 = INT_MIN, max_ending_here1 = 0;
    for (int i = 0; i <n; i++) 
    { 
        max_ending_here1 = max_ending_here1 + b[i]; 
        if (max_so_far1 < max_ending_here1) 
            max_so_far1 = max_ending_here1; 
  
        if (max_ending_here1 < 0) 
            max_ending_here1 = 0; 
    } int sum=0;
        for(int i=0;i<n;i++)
            sum=sum+A[i];
        sum=sum+max_so_far1;
        if(max_so_far<sum)
            return sum;
        else return max_so_far;
      //max_so_far1;
    }
};
